<?php

namespace test\Bundle\Repository;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    public function findbyMe($id)
    {
        $Query=$this->getEntityManager()
            ->createQuery("SELECT l FROM testBundle:Product l JOIN l.category lc
         WHERE lc.id=:id ")->setParameter('id',$id);

        return $Query->getResult();

    }
    public function findbyMeE($idc)
    {
        $id=date('Y-d-m');
        $Query=$this->getEntityManager()
            ->createQuery("SELECT l FROM testBundle:Product l JOIN l.category lc
         WHERE l.dateExpiration<=:id and lc.id=:idc ")->setParameter('id',$id)->setParameter('idc',$idc);

        return $Query->getResult();

    }
    public function findok()
    {
        $Query=$this->getEntityManager()
            ->createQuery("SELECT l FROM testBundle:Product l 
        ");

        return $Query->getResult();

    }

    public function findbyMe2($min,$max)
    {
        $Query=$this->getEntityManager()
            ->createQuery("SELECT l FROM testBundle:Product l 
         WHERE (l.prix BETWEEN :min AND :max )")->setParameter('min',$min)->setParameter('max',$max);

        return $Query->getResult();

    }
    public function findbyMe3()
    {
        $Query=$this->getEntityManager()
            ->createQuery("SELECT l FROM testBundle:Product l 
         order by l.prix DESC ");

        return $Query->getResult();

    }
    public function findbyMeAsc()
    {
        $Query=$this->getEntityManager()
            ->createQuery("SELECT l FROM testBundle:Product l 
         order by l.prix ASC ");

        return $Query->getResult();

    }
    public function findbyMe4($id)
    {
        $Query=$this->getEntityManager()
            ->createQuery("SELECT l FROM testBundle:Product l 
         WHERE l.idp=:id")->setParameter('id',$id);

        return $Query->getResult();

    }
    public function findbyStat()
    {
        $id=date('Y-d-m');
        $Query=$this->getEntityManager()
            ->createQuery("SELECT count(l.idp) FROM testBundle:Product l 
         WHERE l.dateExpiration<=:id")->setParameter('id',$id);

        try {
            return $Query->getSingleScalarResult();
        } catch (NoResultException $e) {
        } catch (NonUniqueResultException $e) {
        }

    }
    public function findtotal()
    {
        $Query=$this->getEntityManager()
            ->createQuery("SELECT count(l.idp) FROM testBundle:Product l 
         ");

        try {
            return $Query->getSingleScalarResult();
        } catch (NoResultException $e) {
        } catch (NonUniqueResultException $e) {
        }

    }


    public function findStatC($idc)
    {
        $id=date('Y-d-m');
        $Query=$this->getEntityManager()
            ->createQuery("SELECT count(l.idp) FROM testBundle:Product l JOIN l.category lc
         WHERE l.dateExpiration<=:id and lc.id=:idc")->setParameter('idc',$idc)->setParameter('id',$id);

        try {
            return $Query->getSingleScalarResult();
        } catch (NoResultException $e) {
        } catch (NonUniqueResultException $e) {
        }

    }
    public function findStatCP($idc)
    {
        $id=date('Y-d-m');
        $Query=$this->getEntityManager()
            ->createQuery("SELECT count(l.idp)  FROM testBundle:Product l JOIN l.category lc
         WHERE l.dateExpiration!=:id and lc.id=:idc")->setParameter('idc',$idc)->setParameter('id',$id);

        try {
            return $Query->getSingleScalarResult();
        } catch (NoResultException $e) {
        } catch (NonUniqueResultException $e) {
        }

    }

}
